0 info it worked if it ends with ok
1 verbose cli [ 'nodejs', '/usr/bin/npm', 'install' ]
2 info using npm@1.2.12
3 info using node@v0.8.21
4 verbose read json /mnt/hgfs/Dropbox/github/vertnet/webapp/client/package.json
5 warn package.json bootstrap@2.3.0 No README.md file found!
6 verbose readDependencies using package.json deps
7 verbose install where, deps [ '/mnt/hgfs/Dropbox/github/vertnet/webapp/client',
7 verbose install   [ 'uglify-js', 'jshint', 'recess', 'connect', 'hogan.js' ] ]
8 verbose from cache /mnt/hgfs/Dropbox/github/vertnet/webapp/client/package.json
9 info preinstall bootstrap@2.3.0
10 verbose read json /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jslint/package.json
11 warn package.json jslint@0.1.9 No README.md file found!
12 verbose from cache /mnt/hgfs/Dropbox/github/vertnet/webapp/client/package.json
13 verbose readDependencies using package.json deps
14 verbose from cache /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jslint/package.json
15 verbose cache add [ 'uglify-js@1.3.4', null ]
16 verbose cache add name=undefined spec="uglify-js@1.3.4" args=["uglify-js@1.3.4",null]
17 verbose parsed url { pathname: 'uglify-js@1.3.4',
17 verbose parsed url   path: 'uglify-js@1.3.4',
17 verbose parsed url   href: 'uglify-js@1.3.4' }
18 verbose cache add name="uglify-js" spec="1.3.4" args=["uglify-js","1.3.4"]
19 verbose parsed url { pathname: '1.3.4', path: '1.3.4', href: '1.3.4' }
20 verbose addNamed [ 'uglify-js', '1.3.4' ]
21 verbose addNamed [ '1.3.4', '1.3.4' ]
22 verbose cache add [ 'jshint@0.9.1', null ]
23 verbose cache add name=undefined spec="jshint@0.9.1" args=["jshint@0.9.1",null]
24 verbose parsed url { pathname: 'jshint@0.9.1',
24 verbose parsed url   path: 'jshint@0.9.1',
24 verbose parsed url   href: 'jshint@0.9.1' }
25 verbose cache add name="jshint" spec="0.9.1" args=["jshint","0.9.1"]
26 verbose parsed url { pathname: '0.9.1', path: '0.9.1', href: '0.9.1' }
27 verbose addNamed [ 'jshint', '0.9.1' ]
28 verbose addNamed [ '0.9.1', '0.9.1' ]
29 verbose cache add [ 'recess@1.1.6', null ]
30 verbose cache add name=undefined spec="recess@1.1.6" args=["recess@1.1.6",null]
31 verbose parsed url { pathname: 'recess@1.1.6',
31 verbose parsed url   path: 'recess@1.1.6',
31 verbose parsed url   href: 'recess@1.1.6' }
32 verbose cache add name="recess" spec="1.1.6" args=["recess","1.1.6"]
33 verbose parsed url { pathname: '1.1.6', path: '1.1.6', href: '1.1.6' }
34 verbose addNamed [ 'recess', '1.1.6' ]
35 verbose addNamed [ '1.1.6', '1.1.6' ]
36 silly lockFile 8c7fac75-uglify-js-1-3-4 uglify-js@1.3.4
37 verbose lock uglify-js@1.3.4 /home/eightysteele/.npm/8c7fac75-uglify-js-1-3-4.lock
38 silly lockFile 0e6d62f6-jshint-0-9-1 jshint@0.9.1
39 verbose lock jshint@0.9.1 /home/eightysteele/.npm/0e6d62f6-jshint-0-9-1.lock
40 silly lockFile 12b8eafd-recess-1-1-6 recess@1.1.6
41 verbose lock recess@1.1.6 /home/eightysteele/.npm/12b8eafd-recess-1-1-6.lock
42 verbose url raw uglify-js/1.3.4
43 verbose url resolving [ 'https://registry.npmjs.org/', './uglify-js/1.3.4' ]
44 verbose url resolved https://registry.npmjs.org/uglify-js/1.3.4
45 info trying registry request attempt 1 at 21:02:54
46 verbose etag "62GJH092R7FIS3L70Q2YJTDC3"
47 http GET https://registry.npmjs.org/uglify-js/1.3.4
48 verbose url raw jshint/0.9.1
49 verbose url resolving [ 'https://registry.npmjs.org/', './jshint/0.9.1' ]
50 verbose url resolved https://registry.npmjs.org/jshint/0.9.1
51 info trying registry request attempt 1 at 21:02:54
52 verbose etag "BCR3H5CG7PHK4ODF49WGR4BCT"
53 http GET https://registry.npmjs.org/jshint/0.9.1
54 verbose url raw recess/1.1.6
55 verbose url resolving [ 'https://registry.npmjs.org/', './recess/1.1.6' ]
56 verbose url resolved https://registry.npmjs.org/recess/1.1.6
57 info trying registry request attempt 1 at 21:02:54
58 verbose etag "1KLG09OUDTZF4H5NQ4B4WKEL6"
59 http GET https://registry.npmjs.org/recess/1.1.6
60 verbose cache add [ 'connect@2.1.3', null ]
61 verbose cache add name=undefined spec="connect@2.1.3" args=["connect@2.1.3",null]
62 verbose parsed url { pathname: 'connect@2.1.3',
62 verbose parsed url   path: 'connect@2.1.3',
62 verbose parsed url   href: 'connect@2.1.3' }
63 verbose cache add name="connect" spec="2.1.3" args=["connect","2.1.3"]
64 verbose parsed url { pathname: '2.1.3', path: '2.1.3', href: '2.1.3' }
65 verbose addNamed [ 'connect', '2.1.3' ]
66 verbose addNamed [ '2.1.3', '2.1.3' ]
67 silly lockFile 2487a60b-connect-2-1-3 connect@2.1.3
68 verbose lock connect@2.1.3 /home/eightysteele/.npm/2487a60b-connect-2-1-3.lock
69 verbose cache add [ 'hogan.js@2.0.0', null ]
70 verbose cache add name=undefined spec="hogan.js@2.0.0" args=["hogan.js@2.0.0",null]
71 verbose parsed url { pathname: 'hogan.js@2.0.0',
71 verbose parsed url   path: 'hogan.js@2.0.0',
71 verbose parsed url   href: 'hogan.js@2.0.0' }
72 verbose cache add name="hogan.js" spec="2.0.0" args=["hogan.js","2.0.0"]
73 verbose parsed url { pathname: '2.0.0', path: '2.0.0', href: '2.0.0' }
74 verbose addNamed [ 'hogan.js', '2.0.0' ]
75 verbose addNamed [ '2.0.0', '2.0.0' ]
76 silly lockFile fe7ba41d-hogan-js-2-0-0 hogan.js@2.0.0
77 verbose lock hogan.js@2.0.0 /home/eightysteele/.npm/fe7ba41d-hogan-js-2-0-0.lock
78 verbose url raw connect/2.1.3
79 verbose url resolving [ 'https://registry.npmjs.org/', './connect/2.1.3' ]
80 verbose url resolved https://registry.npmjs.org/connect/2.1.3
81 info trying registry request attempt 1 at 21:02:54
82 verbose etag "66WJ0JFYL6UH75NKOQIQ4CO87"
83 http GET https://registry.npmjs.org/connect/2.1.3
84 verbose url raw hogan.js/2.0.0
85 verbose url resolving [ 'https://registry.npmjs.org/', './hogan.js/2.0.0' ]
86 verbose url resolved https://registry.npmjs.org/hogan.js/2.0.0
87 info trying registry request attempt 1 at 21:02:54
88 verbose etag "4G6MD24P430ZJHYM6VFR2A1U9"
89 http GET https://registry.npmjs.org/hogan.js/2.0.0
90 http 304 https://registry.npmjs.org/jshint/0.9.1
91 silly registry.get cb [ 304,
91 silly registry.get   { server: 'CouchDB/1.2.1 (Erlang OTP/R15B03)',
91 silly registry.get     etag: '"BCR3H5CG7PHK4ODF49WGR4BCT"',
91 silly registry.get     date: 'Fri, 01 Mar 2013 05:02:54 GMT',
91 silly registry.get     'content-length': '0' } ]
92 verbose etag jshint/0.9.1 from cache
93 http 304 https://registry.npmjs.org/uglify-js/1.3.4
94 silly registry.get cb [ 304,
94 silly registry.get   { server: 'CouchDB/1.2.1 (Erlang OTP/R15B03)',
94 silly registry.get     etag: '"62GJH092R7FIS3L70Q2YJTDC3"',
94 silly registry.get     date: 'Fri, 01 Mar 2013 05:02:54 GMT',
94 silly registry.get     'content-length': '0' } ]
95 verbose etag uglify-js/1.3.4 from cache
96 verbose read json /home/eightysteele/.npm/jshint/0.9.1/package/package.json
97 verbose read json /home/eightysteele/.npm/uglify-js/1.3.4/package/package.json
98 silly lockFile 0e6d62f6-jshint-0-9-1 jshint@0.9.1
99 silly lockFile 0e6d62f6-jshint-0-9-1 jshint@0.9.1
100 silly lockFile 8c7fac75-uglify-js-1-3-4 uglify-js@1.3.4
101 silly lockFile 8c7fac75-uglify-js-1-3-4 uglify-js@1.3.4
102 http 304 https://registry.npmjs.org/connect/2.1.3
103 silly registry.get cb [ 304,
103 silly registry.get   { server: 'CouchDB/1.2.1 (Erlang OTP/R15B03)',
103 silly registry.get     etag: '"66WJ0JFYL6UH75NKOQIQ4CO87"',
103 silly registry.get     date: 'Fri, 01 Mar 2013 05:02:54 GMT',
103 silly registry.get     'content-length': '0' } ]
104 verbose etag connect/2.1.3 from cache
105 verbose read json /home/eightysteele/.npm/connect/2.1.3/package/package.json
106 warn package.json connect@2.1.3 No README.md file found!
107 silly lockFile 2487a60b-connect-2-1-3 connect@2.1.3
108 silly lockFile 2487a60b-connect-2-1-3 connect@2.1.3
109 http 304 https://registry.npmjs.org/recess/1.1.6
110 silly registry.get cb [ 304,
110 silly registry.get   { server: 'CouchDB/1.2.1 (Erlang OTP/R15B03)',
110 silly registry.get     etag: '"1KLG09OUDTZF4H5NQ4B4WKEL6"',
110 silly registry.get     date: 'Fri, 01 Mar 2013 05:02:54 GMT',
110 silly registry.get     'content-length': '0' } ]
111 verbose etag recess/1.1.6 from cache
112 verbose read json /home/eightysteele/.npm/recess/1.1.6/package/package.json
113 silly lockFile 12b8eafd-recess-1-1-6 recess@1.1.6
114 silly lockFile 12b8eafd-recess-1-1-6 recess@1.1.6
115 http 304 https://registry.npmjs.org/hogan.js/2.0.0
116 silly registry.get cb [ 304,
116 silly registry.get   { server: 'CouchDB/1.2.1 (Erlang OTP/R15B03)',
116 silly registry.get     etag: '"4G6MD24P430ZJHYM6VFR2A1U9"',
116 silly registry.get     date: 'Fri, 01 Mar 2013 05:02:54 GMT',
116 silly registry.get     'content-length': '0' } ]
117 verbose etag hogan.js/2.0.0 from cache
118 verbose read json /home/eightysteele/.npm/hogan.js/2.0.0/package/package.json
119 silly lockFile fe7ba41d-hogan-js-2-0-0 hogan.js@2.0.0
120 silly lockFile fe7ba41d-hogan-js-2-0-0 hogan.js@2.0.0
121 silly resolved [ { name: 'jshint',
121 silly resolved     version: '0.9.1',
121 silly resolved     description: 'A CLI for JSHint',
121 silly resolved     homepage: 'http://github.com/jshint/node-jshint',
121 silly resolved     author:
121 silly resolved      { name: 'Brent Lintner',
121 silly resolved        email: 'brent.lintner@gmail.com',
121 silly resolved        url: 'http://github.com/brentlintner' },
121 silly resolved     licenses: [ [Object] ],
121 silly resolved     bin: { jshint: './bin/hint' },
121 silly resolved     main: 'packages/jshint/jshint',
121 silly resolved     files:
121 silly resolved      [ 'packages/jshint/README.markdown',
121 silly resolved        'packages/jshint/jshint.js',
121 silly resolved        'README.md',
121 silly resolved        'LICENSE',
121 silly resolved        'bin/hint',
121 silly resolved        'lib' ],
121 silly resolved     dependencies: { cli: '0.4.3', minimatch: '0.0.x' },
121 silly resolved     devDependencies: { 'jasmine-node': '1.0.x' },
121 silly resolved     preferGlobal: true,
121 silly resolved     readme: '# node-jshint\n\nA command line interface and npm package for jshint.\n\n## Install\n\nTo use jshint from any location (for npm v1.x) you need to install using the global (-g) flag.\n\n    npm install -g jshint\n\n## Usage\n\n    jshint -h\n\nYou can also require JSHint itself as a module.\n\n    var jshint = require(\'jshint\');\n\nNote: If you are using npm v1.x be sure to install jshint locally (without the -g flag) or link it globally.\n\n## Text Editor Plugins\n\n* [gedit-node-jshint](https://github.com/niftylettuce/gedit-node-jshint) - Simply use CTRL+J in gedit to run JSHint using `node-jshint`.\n* [vim syntastic](https://github.com/scrooloose/syntastic) - Run node-jshint at each file save.\n* [sublime-jshint](https://github.com/uipoet/sublime-jshint) - `F7` or `command-B` on any .js file. `F4` next error line,column. `shift-F4` previous error line,column.\n\n## Custom Reporters\n\nSpecify a custom reporter module (see example/reporter.js).\n\n    --reporter path/to/reporter.js\n\nUse a jslint compatible xml reporter.\n\n    --jslint-reporter\n\nShow additional non-error data generated by jshint (unused globals etc).\n\n    --show-non-errors\n\n## Configuration Options\n\n**Note:** This behavior described below is very different from versions prior to `0.6`.\n\nThe CLI uses the default options that come with JSHint. \n\nOnly one extra option is unique to node-jshint: `globals` \nallows you to define an object of globals that get ignored for every file.\nTo see an example you can look at how whitelisted globals are defined\nin the [jshint code](https://github.com/jshint/jshint/blob/c047ea1b01097fcc220fcd1a55c41f67ae2e6e81/jshint.js#L556)\n\nTo have your own configuration apply, there are several methods you can use:\n\n### Specify Manually\n\nSetting the `--config=/path/to/your/config` command line option to specify your own configuration file outside of the directory tree for your project.\n\n### Within your Project\'s Directory Tree\n\nWhen the CLI is called, and a configuration file isn\'t specified already, `node-jshint` will attempt to locate one for you starting in `pwd`. (or "present working directory") If this does not yield a `.jshintrc` file, it will move one level up (`..`) the directory tree all the way up to the filesystem root. If a file is found, it stops immediately and uses that set of configuration.\n\nThis setup allows you to set up **one** configuration file for your entire project. (place it in the root folder) As long as you run `jshint` from anywhere within your project directory tree, the same configuration file will be used.\n\n### Home Directory\n\nIf all the methods above do not yield a `.jshintrc` to use, the last place that will be checked is your user\'s `$HOME` directory.\n\n## File Extensions\n\nDefault extension for files is ".js". If you want to use JSHint with other file extensions (.json), you need to pass this extra extension as an option :\n\n    --extra-ext .json\n\n## Ignoring Files and Directories\n\nIf there is a .jshintignore file in your project\'s directory tree, (also provided you run `jshint` from within your project\'s directory) then any directories or files specified will be skipped over. (behaves just like a `.gitignore` file)\n\n**Note:** Pattern matching uses minimatch, with the nocase [option](https://github.com/isaacs/minimatch). When there is no match, it performs a left side match (when no forward slashes present and path is a directory).\n\n## Installing dependencies for development\n\n    ./configure\n\n## Build Commands\n\n    jake -T\n\n## Project Guidelines\n\n* All tests are passing.\n* No (new) JSHint errors are introduced.\n',
121 silly resolved     readmeFilename: 'README.md',
121 silly resolved     _id: 'jshint@0.9.1',
121 silly resolved     _from: 'jshint@0.9.1' },
121 silly resolved   { name: 'uglify-js',
121 silly resolved     description: 'JavaScript parser and compressor/beautifier toolkit',
121 silly resolved     author:
121 silly resolved      { name: 'Mihai Bazon',
121 silly resolved        email: 'mihai.bazon@gmail.com',
121 silly resolved        url: 'http://mihai.bazon.net/blog' },
121 silly resolved     version: '1.3.4',
121 silly resolved     main: './uglify-js.js',
121 silly resolved     bin: { uglifyjs: './bin/uglifyjs' },
121 silly resolved     repository: { type: 'git', url: 'git@github.com:mishoo/UglifyJS.git' },
121 silly resolved     devDependencies: { nodeunit: '0.7.x' },
121 silly resolved     scripts: { test: '$(which nodeunit || echo node_modules/nodeunit/bin/nodeunit) test/unit/scripts.js && test/testparser.js && test/testconsolidator.js' },
121 silly resolved     readme: '<?xml version="1.0" encoding="utf-8"?>\n<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"\n               "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n<html xmlns="http://www.w3.org/1999/xhtml"\nlang="en" xml:lang="en">\n<head>\n<title>UglifyJS &ndash; a JavaScript parser/compressor/beautifier</title>\n<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>\n<meta name="generator" content="Org-mode"/>\n<meta name="generated" content="2012-08-27 12:38:12 EEST"/>\n<meta name="author" content="Mihai Bazon"/>\n<meta name="description" content="a JavaScript parser/compressor/beautifier in JavaScript"/>\n<meta name="keywords" content="javascript, js, parser, compiler, compressor, mangle, minify, minifier"/>\n<style type="text/css">\n <!--/*--><![CDATA[/*><!--*/\n  html { font-family: Times, serif; font-size: 12pt; }\n  .title  { text-align: center; }\n  .todo   { color: red; }\n  .done   { color: green; }\n  .tag    { background-color: #add8e6; font-weight:normal }\n  .target { }\n  .timestamp { color: #bebebe; }\n  .timestamp-kwd { color: #5f9ea0; }\n  .right  {margin-left:auto; margin-right:0px;  text-align:right;}\n  .left   {margin-left:0px;  margin-right:auto; text-align:left;}\n  .center {margin-left:auto; margin-right:auto; text-align:center;}\n  p.verse { margin-left: 3% }\n  pre {\n\tborder: 1pt solid #AEBDCC;\n\tbackground-color: #F3F5F7;\n\tpadding: 5pt;\n\tfont-family: courier, monospace;\n        font-size: 90%;\n        overflow:auto;\n  }\n  table { border-collapse: collapse; }\n  td, th { vertical-align: top;  }\n  th.right  { text-align:center;  }\n  th.left   { text-align:center;   }\n  th.center { text-align:center; }\n  td.right  { text-align:right;  }\n  td.left   { text-align:left;   }\n  td.center { text-align:center; }\n  dt { font-weight: bold; }\n  div.figure { padding: 0.5em; }\n  div.figure p { text-align: center; }\n  div.inlinetask {\n    padding:10px;\n    border:2px solid gray;\n    margin:10px;\n    background: #ffffcc;\n  }\n  textarea { overflow-x: auto; }\n  .linenr { font-size:smaller }\n  .code-highlighted {background-color:#ffff00;}\n  .org-info-js_info-navigation { border-style:none; }\n  #org-info-js_console-label { font-size:10px; font-weight:bold;\n                               white-space:nowrap; }\n  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;\n                                 font-weight:bold; }\n  /*]]>*/-->\n</style>\n<link rel="stylesheet" type="text/css" href="docstyle.css" />\n<script type="text/javascript">\n<!--/*--><![CDATA[/*><!--*/\n function CodeHighlightOn(elem, id)\n {\n   var target = document.getElementById(id);\n   if(null != target) {\n     elem.cacheClassElem = elem.className;\n     elem.cacheClassTarget = target.className;\n     target.className = "code-highlighted";\n     elem.className   = "code-highlighted";\n   }\n }\n function CodeHighlightOff(elem, id)\n {\n   var target = document.getElementById(id);\n   if(elem.cacheClassElem)\n     elem.className = elem.cacheClassElem;\n   if(elem.cacheClassTarget)\n     target.className = elem.cacheClassTarget;\n }\n/*]]>*///-->\n</script>\n\n</head>\n<body>\n\n<div id="preamble">\n\n</div>\n\n<div id="content">\n<h1 class="title">UglifyJS &ndash; a JavaScript parser/compressor/beautifier</h1>\n\n\n<div id="table-of-contents">\n<h2>Table of Contents</h2>\n<div id="text-table-of-contents">\n<ul>\n<li><a href="#sec-1">1 NEW: UglifyJS2 </a></li>\n<li><a href="#sec-2">2 UglifyJS &mdash; a JavaScript parser/compressor/beautifier </a>\n<ul>\n<li><a href="#sec-2-1">2.1 Unsafe transformations </a>\n<ul>\n<li><a href="#sec-2-1-1">2.1.1 Calls involving the global Array constructor </a></li>\n<li><a href="#sec-2-1-2">2.1.2 <code>obj.toString()</code> ==&gt; <code>obj+“”</code> </a></li>\n</ul>\n</li>\n<li><a href="#sec-2-2">2.2 Install (NPM) </a></li>\n<li><a href="#sec-2-3">2.3 Install latest code from GitHub </a></li>\n<li><a href="#sec-2-4">2.4 Usage </a>\n<ul>\n<li><a href="#sec-2-4-1">2.4.1 API </a></li>\n<li><a href="#sec-2-4-2">2.4.2 Beautifier shortcoming &ndash; no more comments </a></li>\n<li><a href="#sec-2-4-3">2.4.3 Use as a code pre-processor </a></li>\n</ul>\n</li>\n<li><a href="#sec-2-5">2.5 Compression &ndash; how good is it? </a></li>\n<li><a href="#sec-2-6">2.6 Bugs? </a></li>\n<li><a href="#sec-2-7">2.7 Links </a></li>\n<li><a href="#sec-2-8">2.8 License </a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n\n<div id="outline-container-1" class="outline-2">\n<h2 id="sec-1"><span class="section-number-2">1</span> NEW: UglifyJS2 </h2>\n<div class="outline-text-2" id="text-1">\n\n\n<p>\nI started working on UglifyJS\'s successor, version 2.  It\'s almost a full\nrewrite (except for the parser which is heavily modified, everything else\nstarts from scratch).  I\'ve detailed my reasons in the README, see the\nproject page.\n</p>\n<p>\n<a href="https://github.com/mishoo/UglifyJS2">https://github.com/mishoo/UglifyJS2</a>\n</p>\n<p>\nVersion 1 will continue to be maintained for fixing show-stopper bugs, but\nno new features should be expected.\n</p>\n<p>\nPlease help me focus on version 2 by <a href="http://pledgie.com/campaigns/18110">making a donation</a>!\n</p>\n</div>\n\n</div>\n\n<div id="outline-container-2" class="outline-2">\n<h2 id="sec-2"><span class="section-number-2">2</span> UglifyJS &mdash; a JavaScript parser/compressor/beautifier </h2>\n<div class="outline-text-2" id="text-2">\n\n\n<p>\nThis package implements a general-purpose JavaScript\nparser/compressor/beautifier toolkit.  It is developed on <a href="http://nodejs.org/">NodeJS</a>, but it\nshould work on any JavaScript platform supporting the CommonJS module system\n(and if your platform of choice doesn\'t support CommonJS, you can easily\nimplement it, or discard the <code>exports.*</code> lines from UglifyJS sources).\n</p>\n<p>\nThe tokenizer/parser generates an abstract syntax tree from JS code.  You\ncan then traverse the AST to learn more about the code, or do various\nmanipulations on it.  This part is implemented in <a href="../lib/parse-js.js">parse-js.js</a> and it\'s a\nport to JavaScript of the excellent <a href="http://marijn.haverbeke.nl/parse-js/">parse-js</a> Common Lisp library from <a href="http://marijn.haverbeke.nl/">Marijn Haverbeke</a>.\n</p>\n<p>\n( See <a href="http://github.com/mishoo/cl-uglify-js">cl-uglify-js</a> if you\'re looking for the Common Lisp version of\nUglifyJS. )\n</p>\n<p>\nThe second part of this package, implemented in <a href="../lib/process.js">process.js</a>, inspects and\nmanipulates the AST generated by the parser to provide the following:\n</p>\n<ul>\n<li>ability to re-generate JavaScript code from the AST.  Optionally\n  indented&mdash;you can use this if you want to “beautify” a program that has\n  been compressed, so that you can inspect the source.  But you can also run\n  our code generator to print out an AST without any whitespace, so you\n  achieve compression as well.\n\n</li>\n<li>shorten variable names (usually to single characters).  Our mangler will\n  analyze the code and generate proper variable names, depending on scope\n  and usage, and is smart enough to deal with globals defined elsewhere, or\n  with <code>eval()</code> calls or <code>with{}</code> statements.  In short, if <code>eval()</code> or\n  <code>with{}</code> are used in some scope, then all variables in that scope and any\n  variables in the parent scopes will remain unmangled, and any references\n  to such variables remain unmangled as well.\n\n</li>\n<li>various small optimizations that may lead to faster code but certainly\n  lead to smaller code.  Where possible, we do the following:\n\n<ul>\n<li>foo["bar"]  ==&gt;  foo.bar\n\n</li>\n<li>remove block brackets <code>{}</code>\n\n</li>\n<li>join consecutive var declarations:\n    var a = 10; var b = 20; ==&gt; var a=10,b=20;\n\n</li>\n<li>resolve simple constant expressions: 1 +2 * 3 ==&gt; 7.  We only do the\n    replacement if the result occupies less bytes; for example 1/3 would\n    translate to 0.333333333333, so in this case we don\'t replace it.\n\n</li>\n<li>consecutive statements in blocks are merged into a sequence; in many\n    cases, this leaves blocks with a single statement, so then we can remove\n    the block brackets.\n\n</li>\n<li>various optimizations for IF statements:\n\n<ul>\n<li>if (foo) bar(); else baz(); ==&gt; foo?bar():baz();\n</li>\n<li>if (!foo) bar(); else baz(); ==&gt; foo?baz():bar();\n</li>\n<li>if (foo) bar(); ==&gt; foo&amp;&amp;bar();\n</li>\n<li>if (!foo) bar(); ==&gt; foo||bar();\n</li>\n<li>if (foo) return bar(); else return baz(); ==&gt; return foo?bar():baz();\n</li>\n<li>if (foo) return bar(); else something(); ==&gt; {if(foo)return bar();something()}\n\n</li>\n</ul>\n\n</li>\n<li>remove some unreachable code and warn about it (code that follows a\n    <code>return</code>, <code>throw</code>, <code>break</code> or <code>continue</code> statement, except\n    function/variable declarations).\n\n</li>\n<li>act a limited version of a pre-processor (c.f. the pre-processor of\n    C/C++) to allow you to safely replace selected global symbols with\n    specified values.  When combined with the optimisations above this can\n    make UglifyJS operate slightly more like a compilation process, in\n    that when certain symbols are replaced by constant values, entire code\n    blocks may be optimised away as unreachable.\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n\n</div>\n\n<div id="outline-container-2-1" class="outline-3">\n<h3 id="sec-2-1"><span class="section-number-3">2.1</span> <span class="target">Unsafe transformations</span>  </h3>\n<div class="outline-text-3" id="text-2-1">\n\n\n<p>\nThe following transformations can in theory break code, although they\'re\nprobably safe in most practical cases.  To enable them you need to pass the\n<code>--unsafe</code> flag.\n</p>\n\n</div>\n\n<div id="outline-container-2-1-1" class="outline-4">\n<h4 id="sec-2-1-1"><span class="section-number-4">2.1.1</span> Calls involving the global Array constructor </h4>\n<div class="outline-text-4" id="text-2-1-1">\n\n\n<p>\nThe following transformations occur:\n</p>\n\n\n\n<pre class="src src-js"><span class="org-keyword">new</span> <span class="org-type">Array</span>(1, 2, 3, 4)  =&gt; [1,2,3,4]\nArray(a, b, c)         =&gt; [a,b,c]\n<span class="org-keyword">new</span> <span class="org-type">Array</span>(5)           =&gt; Array(5)\n<span class="org-keyword">new</span> <span class="org-type">Array</span>(a)           =&gt; Array(a)\n</pre>\n\n\n<p>\nThese are all safe if the Array name isn\'t redefined.  JavaScript does allow\none to globally redefine Array (and pretty much everything, in fact) but I\npersonally don\'t see why would anyone do that.\n</p>\n<p>\nUglifyJS does handle the case where Array is redefined locally, or even\nglobally but with a <code>function</code> or <code>var</code> declaration.  Therefore, in the\nfollowing cases UglifyJS <b>doesn\'t touch</b> calls or instantiations of Array:\n</p>\n\n\n\n<pre class="src src-js"><span class="org-comment-delimiter">// </span><span class="org-comment">case 1.  globally declared variable</span>\n  <span class="org-keyword">var</span> <span class="org-variable-name">Array</span>;\n  <span class="org-keyword">new</span> <span class="org-type">Array</span>(1, 2, 3);\n  Array(a, b);\n\n  <span class="org-comment-delimiter">// </span><span class="org-comment">or (can be declared later)</span>\n  <span class="org-keyword">new</span> <span class="org-type">Array</span>(1, 2, 3);\n  <span class="org-keyword">var</span> <span class="org-variable-name">Array</span>;\n\n  <span class="org-comment-delimiter">// </span><span class="org-comment">or (can be a function)</span>\n  <span class="org-keyword">new</span> <span class="org-type">Array</span>(1, 2, 3);\n  <span class="org-keyword">function</span> <span class="org-function-name">Array</span>() { ... }\n\n<span class="org-comment-delimiter">// </span><span class="org-comment">case 2.  declared in a function</span>\n  (<span class="org-keyword">function</span>(){\n    a = <span class="org-keyword">new</span> <span class="org-type">Array</span>(1, 2, 3);\n    b = Array(5, 6);\n    <span class="org-keyword">var</span> <span class="org-variable-name">Array</span>;\n  })();\n\n  <span class="org-comment-delimiter">// </span><span class="org-comment">or</span>\n  (<span class="org-keyword">function</span>(<span class="org-variable-name">Array</span>){\n    <span class="org-keyword">return</span> Array(5, 6, 7);\n  })();\n\n  <span class="org-comment-delimiter">// </span><span class="org-comment">or</span>\n  (<span class="org-keyword">function</span>(){\n    <span class="org-keyword">return</span> <span class="org-keyword">new</span> <span class="org-type">Array</span>(1, 2, 3, 4);\n    <span class="org-keyword">function</span> <span class="org-function-name">Array</span>() { ... }\n  })();\n\n  <span class="org-comment-delimiter">// </span><span class="org-comment">etc.</span>\n</pre>\n\n\n</div>\n\n</div>\n\n<div id="outline-container-2-1-2" class="outline-4">\n<h4 id="sec-2-1-2"><span class="section-number-4">2.1.2</span> <code>obj.toString()</code> ==&gt; <code>obj+“”</code> </h4>\n<div class="outline-text-4" id="text-2-1-2">\n\n\n</div>\n</div>\n\n</div>\n\n<div id="outline-container-2-2" class="outline-3">\n<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Install (NPM) </h3>\n<div class="outline-text-3" id="text-2-2">\n\n\n<p>\nUglifyJS is now available through NPM &mdash; <code>npm install uglify-js</code> should do\nthe job.\n</p>\n</div>\n\n</div>\n\n<div id="outline-container-2-3" class="outline-3">\n<h3 id="sec-2-3"><span class="section-number-3">2.3</span> Install latest code from GitHub </h3>\n<div class="outline-text-3" id="text-2-3">\n\n\n\n\n\n<pre class="src src-sh"><span class="org-comment-delimiter">## </span><span class="org-comment">clone the repository</span>\nmkdir -p /where/you/wanna/put/it\n<span class="org-builtin">cd</span> /where/you/wanna/put/it\ngit clone git://github.com/mishoo/UglifyJS.git\n\n<span class="org-comment-delimiter">## </span><span class="org-comment">make the module available to Node</span>\nmkdir -p ~/.node_libraries/\n<span class="org-builtin">cd</span> ~/.node_libraries/\nln -s /where/you/wanna/put/it/UglifyJS/uglify-js.js\n\n<span class="org-comment-delimiter">## </span><span class="org-comment">and if you want the CLI script too:</span>\nmkdir -p ~/bin\n<span class="org-builtin">cd</span> ~/bin\nln -s /where/you/wanna/put/it/UglifyJS/bin/uglifyjs\n  <span class="org-comment-delimiter"># </span><span class="org-comment">(then add ~/bin to your $PATH if it\'s not there already)</span>\n</pre>\n\n\n</div>\n\n</div>\n\n<div id="outline-container-2-4" class="outline-3">\n<h3 id="sec-2-4"><span class="section-number-3">2.4</span> Usage </h3>\n<div class="outline-text-3" id="text-2-4">\n\n\n<p>\nThere is a command-line tool that exposes the functionality of this library\nfor your shell-scripting needs:\n</p>\n\n\n\n<pre class="src src-sh">uglifyjs [ options... ] [ filename ]\n</pre>\n\n\n<p>\n<code>filename</code> should be the last argument and should name the file from which\nto read the JavaScript code.  If you don\'t specify it, it will read code\nfrom STDIN.\n</p>\n<p>\nSupported options:\n</p>\n<ul>\n<li><code>-b</code> or <code>--beautify</code> &mdash; output indented code; when passed, additional\n  options control the beautifier:\n\n<ul>\n<li><code>-i N</code> or <code>--indent N</code> &mdash; indentation level (number of spaces)\n\n</li>\n<li><code>-q</code> or <code>--quote-keys</code> &mdash; quote keys in literal objects (by default,\n    only keys that cannot be identifier names will be quotes).\n\n</li>\n</ul>\n\n</li>\n<li><code>-c</code> or <code>----consolidate-primitive-values</code> &mdash; consolidates null, Boolean,\n  and String values. Known as aliasing in the Closure Compiler. Worsens the\n  data compression ratio of gzip.\n\n</li>\n<li><code>--ascii</code> &mdash; pass this argument to encode non-ASCII characters as\n  <code>\\uXXXX</code> sequences.  By default UglifyJS won\'t bother to do it and will\n  output Unicode characters instead.  (the output is always encoded in UTF8,\n  but if you pass this option you\'ll only get ASCII).\n\n</li>\n<li><code>-nm</code> or <code>--no-mangle</code> &mdash; don\'t mangle names.\n\n</li>\n<li><code>-nmf</code> or <code>--no-mangle-functions</code> &ndash; in case you want to mangle variable\n  names, but not touch function names.\n\n</li>\n<li><code>-ns</code> or <code>--no-squeeze</code> &mdash; don\'t call <code>ast_squeeze()</code> (which does various\n  optimizations that result in smaller, less readable code).\n\n</li>\n<li><code>-mt</code> or <code>--mangle-toplevel</code> &mdash; mangle names in the toplevel scope too\n  (by default we don\'t do this).\n\n</li>\n<li><code>--no-seqs</code> &mdash; when <code>ast_squeeze()</code> is called (thus, unless you pass\n  <code>--no-squeeze</code>) it will reduce consecutive statements in blocks into a\n  sequence.  For example, "a = 10; b = 20; foo();" will be written as\n  "a=10,b=20,foo();".  In various occasions, this allows us to discard the\n  block brackets (since the block becomes a single statement).  This is ON\n  by default because it seems safe and saves a few hundred bytes on some\n  libs that I tested it on, but pass <code>--no-seqs</code> to disable it.\n\n</li>\n<li><code>--no-dead-code</code> &mdash; by default, UglifyJS will remove code that is\n  obviously unreachable (code that follows a <code>return</code>, <code>throw</code>, <code>break</code> or\n  <code>continue</code> statement and is not a function/variable declaration).  Pass\n  this option to disable this optimization.\n\n</li>\n<li><code>-nc</code> or <code>--no-copyright</code> &mdash; by default, <code>uglifyjs</code> will keep the initial\n  comment tokens in the generated code (assumed to be copyright information\n  etc.).  If you pass this it will discard it.\n\n</li>\n<li><code>-o filename</code> or <code>--output filename</code> &mdash; put the result in <code>filename</code>.  If\n  this isn\'t given, the result goes to standard output (or see next one).\n\n</li>\n<li><code>--overwrite</code> &mdash; if the code is read from a file (not from STDIN) and you\n  pass <code>--overwrite</code> then the output will be written in the same file.\n\n</li>\n<li><code>--ast</code> &mdash; pass this if you want to get the Abstract Syntax Tree instead\n  of JavaScript as output.  Useful for debugging or learning more about the\n  internals.\n\n</li>\n<li><code>-v</code> or <code>--verbose</code> &mdash; output some notes on STDERR (for now just how long\n  each operation takes).\n\n</li>\n<li><code>-d SYMBOL[=VALUE]</code> or <code>--define SYMBOL[=VALUE]</code> &mdash; will replace\n  all instances of the specified symbol where used as an identifier\n  (except where symbol has properly declared by a var declaration or\n  use as function parameter or similar) with the specified value. This\n  argument may be specified multiple times to define multiple\n  symbols - if no value is specified the symbol will be replaced with\n  the value <code>true</code>, or you can specify a numeric value (such as\n  <code>1024</code>), a quoted string value (such as ="object"= or\n  =\'https://github.com\'<code>), or the name of another symbol or keyword   (such as =null</code> or <code>document</code>).\n  This allows you, for example, to assign meaningful names to key\n  constant values but discard the symbolic names in the uglified\n  version for brevity/efficiency, or when used wth care, allows\n  UglifyJS to operate as a form of <b>conditional compilation</b>\n  whereby defining appropriate values may, by dint of the constant\n  folding and dead code removal features above, remove entire\n  superfluous code blocks (e.g. completely remove instrumentation or\n  trace code for production use).\n  Where string values are being defined, the handling of quotes are\n  likely to be subject to the specifics of your command shell\n  environment, so you may need to experiment with quoting styles\n  depending on your platform, or you may find the option\n  <code>--define-from-module</code> more suitable for use.\n\n</li>\n<li><code>-define-from-module SOMEMODULE</code> &mdash; will load the named module (as\n  per the NodeJS <code>require()</code> function) and iterate all the exported\n  properties of the module defining them as symbol names to be defined\n  (as if by the <code>--define</code> option) per the name of each property\n  (i.e. without the module name prefix) and given the value of the\n  property. This is a much easier way to handle and document groups of\n  symbols to be defined rather than a large number of <code>--define</code>\n  options.\n\n</li>\n<li><code>--unsafe</code> &mdash; enable other additional optimizations that are known to be\n  unsafe in some contrived situations, but could still be generally useful.\n  For now only these:\n\n<ul>\n<li>foo.toString()  ==&gt;  foo+""\n</li>\n<li>new Array(x,&hellip;)  ==&gt; [x,&hellip;]\n</li>\n<li>new Array(x) ==&gt; Array(x)\n\n</li>\n</ul>\n\n</li>\n<li><code>--max-line-len</code> (default 32K characters) &mdash; add a newline after around\n  32K characters.  I\'ve seen both FF and Chrome croak when all the code was\n  on a single line of around 670K.  Pass &ndash;max-line-len 0 to disable this\n  safety feature.\n\n</li>\n<li><code>--reserved-names</code> &mdash; some libraries rely on certain names to be used, as\n  pointed out in issue #92 and #81, so this option allow you to exclude such\n  names from the mangler.  For example, to keep names <code>require</code> and <code>$super</code>\n  intact you\'d specify &ndash;reserved-names "require,$super".\n\n</li>\n<li><code>--inline-script</code> &ndash; when you want to include the output literally in an\n  HTML <code>&lt;script&gt;</code> tag you can use this option to prevent <code>&lt;/script</code> from\n  showing up in the output.\n\n</li>\n<li><code>--lift-vars</code> &ndash; when you pass this, UglifyJS will apply the following\n  transformations (see the notes in API, <code>ast_lift_variables</code>):\n\n<ul>\n<li>put all <code>var</code> declarations at the start of the scope\n</li>\n<li>make sure a variable is declared only once\n</li>\n<li>discard unused function arguments\n</li>\n<li>discard unused inner (named) functions\n</li>\n<li>finally, try to merge assignments into that one <code>var</code> declaration, if\n    possible.\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n\n</div>\n\n<div id="outline-container-2-4-1" class="outline-4">\n<h4 id="sec-2-4-1"><span class="section-number-4">2.4.1</span> API </h4>\n<div class="outline-text-4" id="text-2-4-1">\n\n\n<p>\nTo use the library from JavaScript, you\'d do the following (example for\nNodeJS):\n</p>\n\n\n\n<pre class="src src-js"><span class="org-keyword">var</span> <span class="org-variable-name">jsp</span> = require(<span class="org-string">"uglify-js"</span>).parser;\n<span class="org-keyword">var</span> <span class="org-variable-name">pro</span> = require(<span class="org-string">"uglify-js"</span>).uglify;\n\n<span class="org-keyword">var</span> <span class="org-variable-name">orig_code</span> = <span class="org-string">"... JS code here"</span>;\n<span class="org-keyword">var</span> <span class="org-variable-name">ast</span> = jsp.parse(orig_code); <span class="org-comment-delimiter">// </span><span class="org-comment">parse code and get the initial AST</span>\nast = pro.ast_mangle(ast); <span class="org-comment-delimiter">// </span><span class="org-comment">get a new AST with mangled names</span>\nast = pro.ast_squeeze(ast); <span class="org-comment-delimiter">// </span><span class="org-comment">get an AST with compression optimizations</span>\n<span class="org-keyword">var</span> <span class="org-variable-name">final_code</span> = pro.gen_code(ast); <span class="org-comment-delimiter">// </span><span class="org-comment">compressed code here</span>\n</pre>\n\n\n<p>\nThe above performs the full compression that is possible right now.  As you\ncan see, there are a sequence of steps which you can apply.  For example if\nyou want compressed output but for some reason you don\'t want to mangle\nvariable names, you would simply skip the line that calls\n<code>pro.ast_mangle(ast)</code>.\n</p>\n<p>\nSome of these functions take optional arguments.  Here\'s a description:\n</p>\n<ul>\n<li><code>jsp.parse(code, strict_semicolons)</code> &ndash; parses JS code and returns an AST.\n  <code>strict_semicolons</code> is optional and defaults to <code>false</code>.  If you pass\n  <code>true</code> then the parser will throw an error when it expects a semicolon and\n  it doesn\'t find it.  For most JS code you don\'t want that, but it\'s useful\n  if you want to strictly sanitize your code.\n\n</li>\n<li><code>pro.ast_lift_variables(ast)</code> &ndash; merge and move <code>var</code> declarations to the\n  scop of the scope; discard unused function arguments or variables; discard\n  unused (named) inner functions.  It also tries to merge assignments\n  following the <code>var</code> declaration into it.\n\n<p>\n  If your code is very hand-optimized concerning <code>var</code> declarations, this\n  lifting variable declarations might actually increase size.  For me it\n  helps out.  On jQuery it adds 865 bytes (243 after gzip).  YMMV.  Also\n  note that (since it\'s not enabled by default) this operation isn\'t yet\n  heavily tested (please report if you find issues!).\n</p>\n<p>\n  Note that although it might increase the image size (on jQuery it gains\n  865 bytes, 243 after gzip) it\'s technically more correct: in certain\n  situations, dead code removal might drop variable declarations, which\n  would not happen if the variables are lifted in advance.\n</p>\n<p>\n  Here\'s an example of what it does:\n</p></li>\n</ul>\n\n\n\n\n\n<pre class="src src-js"><span class="org-keyword">function</span> <span class="org-function-name">f</span>(<span class="org-variable-name">a</span>, <span class="org-variable-name">b</span>, <span class="org-variable-name">c</span>, <span class="org-variable-name">d</span>, <span class="org-variable-name">e</span>) {\n    <span class="org-keyword">var</span> <span class="org-variable-name">q</span>;\n    <span class="org-keyword">var</span> <span class="org-variable-name">w</span>;\n    w = 10;\n    q = 20;\n    <span class="org-keyword">for</span> (<span class="org-keyword">var</span> <span class="org-variable-name">i</span> = 1; i &lt; 10; ++i) {\n        <span class="org-keyword">var</span> <span class="org-variable-name">boo</span> = foo(a);\n    }\n    <span class="org-keyword">for</span> (<span class="org-keyword">var</span> <span class="org-variable-name">i</span> = 0; i &lt; 1; ++i) {\n        <span class="org-keyword">var</span> <span class="org-variable-name">boo</span> = bar(c);\n    }\n    <span class="org-keyword">function</span> <span class="org-function-name">foo</span>(){ ... }\n    <span class="org-keyword">function</span> <span class="org-function-name">bar</span>(){ ... }\n    <span class="org-keyword">function</span> <span class="org-function-name">baz</span>(){ ... }\n}\n\n<span class="org-comment-delimiter">// </span><span class="org-comment">transforms into ==&gt;</span>\n\n<span class="org-keyword">function</span> <span class="org-function-name">f</span>(<span class="org-variable-name">a</span>, <span class="org-variable-name">b</span>, <span class="org-variable-name">c</span>) {\n    <span class="org-keyword">var</span> <span class="org-variable-name">i</span>, <span class="org-variable-name">boo</span>, <span class="org-variable-name">w</span> = 10, <span class="org-variable-name">q</span> = 20;\n    <span class="org-keyword">for</span> (i = 1; i &lt; 10; ++i) {\n        boo = foo(a);\n    }\n    <span class="org-keyword">for</span> (i = 0; i &lt; 1; ++i) {\n        boo = bar(c);\n    }\n    <span class="org-keyword">function</span> <span class="org-function-name">foo</span>() { ... }\n    <span class="org-keyword">function</span> <span class="org-function-name">bar</span>() { ... }\n}\n</pre>\n\n\n<ul>\n<li><code>pro.ast_mangle(ast, options)</code> &ndash; generates a new AST containing mangled\n  (compressed) variable and function names.  It supports the following\n  options:\n\n<ul>\n<li><code>toplevel</code> &ndash; mangle toplevel names (by default we don\'t touch them).\n</li>\n<li><code>except</code> &ndash; an array of names to exclude from compression.\n</li>\n<li><code>defines</code> &ndash; an object with properties named after symbols to\n    replace (see the <code>--define</code> option for the script) and the values\n    representing the AST replacement value.\n\n</li>\n</ul>\n\n</li>\n<li><code>pro.ast_squeeze(ast, options)</code> &ndash; employs further optimizations designed\n  to reduce the size of the code that <code>gen_code</code> would generate from the\n  AST.  Returns a new AST.  <code>options</code> can be a hash; the supported options\n  are:\n\n<ul>\n<li><code>make_seqs</code> (default true) which will cause consecutive statements in a\n    block to be merged using the "sequence" (comma) operator\n\n</li>\n<li><code>dead_code</code> (default true) which will remove unreachable code.\n\n</li>\n</ul>\n\n</li>\n<li><code>pro.gen_code(ast, options)</code> &ndash; generates JS code from the AST.  By\n  default it\'s minified, but using the <code>options</code> argument you can get nicely\n  formatted output.  <code>options</code> is, well, optional :-) and if you pass it it\n  must be an object and supports the following properties (below you can see\n  the default values):\n\n<ul>\n<li><code>beautify: false</code> &ndash; pass <code>true</code> if you want indented output\n</li>\n<li><code>indent_start: 0</code> (only applies when <code>beautify</code> is <code>true</code>) &ndash; initial\n    indentation in spaces\n</li>\n<li><code>indent_level: 4</code> (only applies when <code>beautify</code> is <code>true</code>) --\n    indentation level, in spaces (pass an even number)\n</li>\n<li><code>quote_keys: false</code> &ndash; if you pass <code>true</code> it will quote all keys in\n    literal objects\n</li>\n<li><code>space_colon: false</code> (only applies when <code>beautify</code> is <code>true</code>) &ndash; wether\n    to put a space before the colon in object literals\n</li>\n<li><code>ascii_only: false</code> &ndash; pass <code>true</code> if you want to encode non-ASCII\n    characters as <code>\\uXXXX</code>.\n</li>\n<li><code>inline_script: false</code> &ndash; pass <code>true</code> to escape occurrences of\n    <code>&lt;/script</code> in strings\n</li>\n</ul>\n\n</li>\n</ul>\n\n\n</div>\n\n</div>\n\n<div id="outline-container-2-4-2" class="outline-4">\n<h4 id="sec-2-4-2"><span class="section-number-4">2.4.2</span> Beautifier shortcoming &ndash; no more comments </h4>\n<div class="outline-text-4" id="text-2-4-2">\n\n\n<p>\nThe beautifier can be used as a general purpose indentation tool.  It\'s\nuseful when you want to make a minified file readable.  One limitation,\nthough, is that it discards all comments, so you don\'t really want to use it\nto reformat your code, unless you don\'t have, or don\'t care about, comments.\n</p>\n<p>\nIn fact it\'s not the beautifier who discards comments &mdash; they are dumped at\nthe parsing stage, when we build the initial AST.  Comments don\'t really\nmake sense in the AST, and while we could add nodes for them, it would be\ninconvenient because we\'d have to add special rules to ignore them at all\nthe processing stages.\n</p>\n</div>\n\n</div>\n\n<div id="outline-container-2-4-3" class="outline-4">\n<h4 id="sec-2-4-3"><span class="section-number-4">2.4.3</span> Use as a code pre-processor </h4>\n<div class="outline-text-4" id="text-2-4-3">\n\n\n<p>\nThe <code>--define</code> option can be used, particularly when combined with the\nconstant folding logic, as a form of pre-processor to enable or remove\nparticular constructions, such as might be used for instrumenting\ndevelopment code, or to produce variations aimed at a specific\nplatform.\n</p>\n<p>\nThe code below illustrates the way this can be done, and how the\nsymbol replacement is performed.\n</p>\n\n\n\n<pre class="src src-js">CLAUSE1: <span class="org-keyword">if</span> (<span class="org-keyword">typeof</span> DEVMODE === <span class="org-string">\'undefined\'</span>) {\n    DEVMODE = <span class="org-constant">true</span>;\n}\n\n<span class="org-function-name">CLAUSE2</span>: <span class="org-keyword">function</span> init() {\n    <span class="org-keyword">if</span> (DEVMODE) {\n        console.log(<span class="org-string">"init() called"</span>);\n    }\n    ....\n    DEVMODE &amp;amp;&amp;amp; console.log(<span class="org-string">"init() complete"</span>);\n}\n\n<span class="org-function-name">CLAUSE3</span>: <span class="org-keyword">function</span> reportDeviceStatus(<span class="org-variable-name">device</span>) {\n    <span class="org-keyword">var</span> <span class="org-variable-name">DEVMODE</span> = device.mode, <span class="org-variable-name">DEVNAME</span> = device.name;\n    <span class="org-keyword">if</span> (DEVMODE === <span class="org-string">\'open\'</span>) {\n        ....\n    }\n}\n</pre>\n\n\n<p>\nWhen the above code is normally executed, the undeclared global\nvariable <code>DEVMODE</code> will be assigned the value <b>true</b> (see <code>CLAUSE1</code>)\nand so the <code>init()</code> function (<code>CLAUSE2</code>) will write messages to the\nconsole log when executed, but in <code>CLAUSE3</code> a locally declared\nvariable will mask access to the <code>DEVMODE</code> global symbol.\n</p>\n<p>\nIf the above code is processed by UglifyJS with an argument of\n<code>--define DEVMODE=false</code> then UglifyJS will replace <code>DEVMODE</code> with the\nboolean constant value <b>false</b> within <code>CLAUSE1</code> and <code>CLAUSE2</code>, but it\nwill leave <code>CLAUSE3</code> as it stands because there <code>DEVMODE</code> resolves to\na validly declared variable.\n</p>\n<p>\nAnd more so, the constant-folding features of UglifyJS will recognise\nthat the <code>if</code> condition of <code>CLAUSE1</code> is thus always false, and so will\nremove the test and body of <code>CLAUSE1</code> altogether (including the\notherwise slightly problematical statement <code>false = true;</code> which it\nwill have formed by replacing <code>DEVMODE</code> in the body).  Similarly,\nwithin <code>CLAUSE2</code> both calls to <code>console.log()</code> will be removed\naltogether.\n</p>\n<p>\nIn this way you can mimic, to a limited degree, the functionality of\nthe C/C++ pre-processor to enable or completely remove blocks\ndepending on how certain symbols are defined - perhaps using UglifyJS\nto generate different versions of source aimed at different\nenvironments\n</p>\n<p>\nIt is recommmended (but not made mandatory) that symbols designed for\nthis purpose are given names consisting of <code>UPPER_CASE_LETTERS</code> to\ndistinguish them from other (normal) symbols and avoid the sort of\nclash that <code>CLAUSE3</code> above illustrates.\n</p>\n</div>\n</div>\n\n</div>\n\n<div id="outline-container-2-5" class="outline-3">\n<h3 id="sec-2-5"><span class="section-number-3">2.5</span> Compression &ndash; how good is it? </h3>\n<div class="outline-text-3" id="text-2-5">\n\n\n<p>\nHere are updated statistics.  (I also updated my Google Closure and YUI\ninstallations).\n</p>\n<p>\nWe\'re still a lot better than YUI in terms of compression, though slightly\nslower.  We\'re still a lot faster than Closure, and compression after gzip\nis comparable.\n</p>\n<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">\n<caption></caption>\n<colgroup><col class="left" /><col class="left" /><col class="right" /><col class="left" /><col class="right" /><col class="left" /><col class="right" />\n</colgroup>\n<thead>\n<tr><th scope="col" class="left">File</th><th scope="col" class="left">UglifyJS</th><th scope="col" class="right">UglifyJS+gzip</th><th scope="col" class="left">Closure</th><th scope="col" class="right">Closure+gzip</th><th scope="col" class="left">YUI</th><th scope="col" class="right">YUI+gzip</th></tr>\n</thead>\n<tbody>\n<tr><td class="left">jquery-1.6.2.js</td><td class="left">91001 (0:01.59)</td><td class="right">31896</td><td class="left">90678 (0:07.40)</td><td class="right">31979</td><td class="left">101527 (0:01.82)</td><td class="right">34646</td></tr>\n<tr><td class="left">paper.js</td><td class="left">142023 (0:01.65)</td><td class="right">43334</td><td class="left">134301 (0:07.42)</td><td class="right">42495</td><td class="left">173383 (0:01.58)</td><td class="right">48785</td></tr>\n<tr><td class="left">prototype.js</td><td class="left">88544 (0:01.09)</td><td class="right">26680</td><td class="left">86955 (0:06.97)</td><td class="right">26326</td><td class="left">92130 (0:00.79)</td><td class="right">28624</td></tr>\n<tr><td class="left">thelib-full.js (DynarchLIB)</td><td class="left">251939 (0:02.55)</td><td class="right">72535</td><td class="left">249911 (0:09.05)</td><td class="right">72696</td><td class="left">258869 (0:01.94)</td><td class="right">76584</td></tr>\n</tbody>\n</table>\n\n\n</div>\n\n</div>\n\n<div id="outline-container-2-6" class="outline-3">\n<h3 id="sec-2-6"><span class="section-number-3">2.6</span> Bugs? </h3>\n<div class="outline-text-3" id="text-2-6">\n\n\n<p>\nUnfortunately, for the time being there is no automated test suite.  But I\nran the compressor manually on non-trivial code, and then I tested that the\ngenerated code works as expected.  A few hundred times.\n</p>\n<p>\nDynarchLIB was started in times when there was no good JS minifier.\nTherefore I was quite religious about trying to write short code manually,\nand as such DL contains a lot of syntactic hacks<sup><a class="footref" name="fnr.1" href="#fn.1">1</a></sup> such as “foo == bar ?  a\n= 10 : b = 20”, though the more readable version would clearly be to use\n“if/else”.\n</p>\n<p>\nSince the parser/compressor runs fine on DL and jQuery, I\'m quite confident\nthat it\'s solid enough for production use.  If you can identify any bugs,\nI\'d love to hear about them (<a href="http://groups.google.com/group/uglifyjs">use the Google Group</a> or email me directly).\n</p>\n</div>\n\n</div>\n\n<div id="outline-container-2-7" class="outline-3">\n<h3 id="sec-2-7"><span class="section-number-3">2.7</span> Links </h3>\n<div class="outline-text-3" id="text-2-7">\n\n\n<ul>\n<li>Twitter: <a href="http://twitter.com/UglifyJS">@UglifyJS</a>\n</li>\n<li>Project at GitHub: <a href="http://github.com/mishoo/UglifyJS">http://github.com/mishoo/UglifyJS</a>\n</li>\n<li>Google Group: <a href="http://groups.google.com/group/uglifyjs">http://groups.google.com/group/uglifyjs</a>\n</li>\n<li>Common Lisp JS parser: <a href="http://marijn.haverbeke.nl/parse-js/">http://marijn.haverbeke.nl/parse-js/</a>\n</li>\n<li>JS-to-Lisp compiler: <a href="http://github.com/marijnh/js">http://github.com/marijnh/js</a>\n</li>\n<li>Common Lisp JS uglifier: <a href="http://github.com/mishoo/cl-uglify-js">http://github.com/mishoo/cl-uglify-js</a>\n</li>\n</ul>\n\n\n</div>\n\n</div>\n\n<div id="outline-container-2-8" class="outline-3">\n<h3 id="sec-2-8"><span class="section-number-3">2.8</span> License </h3>\n<div class="outline-text-3" id="text-2-8">\n\n\n<p>\nUglifyJS is released under the BSD license:\n</p>\n\n\n\n<pre class="example">Copyright 2010 (c) Mihai Bazon &lt;mihai.bazon@gmail.com&gt;\nBased on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n    * Redistributions of source code must retain the above\n      copyright notice, this list of conditions and the following\n      disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials\n      provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\nTORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\nTHE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n</pre>\n\n\n<div id="footnotes">\n<h2 class="footnotes">Footnotes: </h2>\n<div id="text-footnotes">\n<p class="footnote"><sup><a class="footnum" name="fn.1" href="#fnr.1">1</a></sup> I even reported a few bugs and suggested some fixes in the original\n    <a href="http://marijn.haverbeke.nl/parse-js/">parse-js</a> library, and Marijn pushed fixes literally in minutes.\n</p></div>\n</div>\n</div>\n\n</div>\n</div>\n</div>\n\n<div id="postamble">\n<p class="date">Date: 2012-08-27 12:38:12 EEST</p>\n<p class="author">Author: Mihai Bazon</p>\n<p class="creator">Org version 7.7 with Emacs version 23</p>\n<a href="http://validator.w3.org/check?uri=referer">Validate XHTML 1.0</a>\n\n</div>\n</body>\n</html>\n',
121 silly resolved     readmeFilename: 'README.html',
121 silly resolved     _id: 'uglify-js@1.3.4',
121 silly resolved     _from: 'uglify-js@1.3.4' },
121 silly resolved   { name: 'connect',
121 silly resolved     version: '2.1.3',
121 silly resolved     description: 'High performance middleware framework',
121 silly resolved     keywords: [ 'framework', 'web', 'middleware', 'connect', 'rack' ],
121 silly resolved     repository: { type: 'git', url: 'git://github.com/senchalabs/connect' },
121 silly resolved     author:
121 silly resolved      { name: 'TJ Holowaychuk',
121 silly resolved        email: 'tj@vision-media.ca',
121 silly resolved        url: 'http://tjholowaychuk.com' },
121 silly resolved     dependencies:
121 silly resolved      { qs: '0.4.2',
121 silly resolved        mime: '1.2.4',
121 silly resolved        formidable: '1.0.9',
121 silly resolved        crc: '0.1.0',
121 silly resolved        debug: '*' },
121 silly resolved     devDependencies: { should: '*', mocha: '*', jade: '*', dox: '*' },
121 silly resolved     main: 'index',
121 silly resolved     engines: { node: '>= 0.5.0 < 0.7.0' },
121 silly resolved     _id: 'connect@2.1.3',
121 silly resolved     readme: 'ERROR: No README.md file found!',
121 silly resolved     _from: 'connect@2.1.3' },
121 silly resolved   { name: 'recess',
121 silly resolved     description: 'A simple, attractive code quality tool for CSS built on top of LESS',
121 silly resolved     version: '1.1.6',
121 silly resolved     author:
121 silly resolved      { name: 'Jacob Thornton',
121 silly resolved        email: 'jacob@twitter.com',
121 silly resolved        url: 'https://github.com/fat' },
121 silly resolved     keywords: [ 'css', 'lint' ],
121 silly resolved     licenses: [ [Object] ],
121 silly resolved     main: './lib',
121 silly resolved     homepage: 'http://twitter.github.com/recess',
121 silly resolved     engines: { node: '>= 0.4.0' },
121 silly resolved     dependencies:
121 silly resolved      { colors: '>= 0.3.0',
121 silly resolved        nopt: '>= 1.0.10',
121 silly resolved        underscore: '>= 1.2.1',
121 silly resolved        watch: '>= 0.5.1',
121 silly resolved        less: '>= 1.3.0' },
121 silly resolved     directories: { bin: './bin' },
121 silly resolved     scripts: { test: 'node test' },
121 silly resolved     bin: { recess: './bin/recess' },
121 silly resolved     preferGlobal: true,
121 silly resolved     readme: 'RECESS [![Build Status](https://secure.travis-ci.org/twitter/recess.png)](http://travis-ci.org/twitter/recess)\n======\n\nDeveloped at Twitter to support our internal styleguide, RECESS is a simple, attractive code quality tool for CSS built on top of LESS.\n\nIncorporate it into your development process as a linter, or integrate it directly into your build system as a compiler, RECESS will keep your source looking clean and super manageable.\n\n\nGENERAL USE\n-----------\n\n```CLI\n$ recess [path] [options]\n```\n\nOPTIONS\n-------\n\n- --compile - compiles your code and outputs it to the terminal. Fixes white space and sort order. Can compile css or less.\n- --compress - compress your compiled code.\n- --config - accepts a path, which specifies a json config object\n- --stripColors - removes color from output (useful when logging)\n- --watch - watch filesystem for changes, useful when compiling Less projects\n- --noIDs - doesn\'t complain about using IDs in your stylesheets\n- --noJSPrefix - doesn\'t complain about styling `.js-` prefixed classnames\n- --noOverqualifying - doesn\'t complain about overqualified selectors (ie: `div#foo.bar`)\n- --noUnderscores - doesn\'t complain about using underscores in your class names\n- --noUniversalSelectors - doesn\'t complain about using the universal `*` selector\n- --prefixWhitespace - adds whitespace prefix to line up vender prefixed properties\n- --strictPropertyOrder - doesn\'t looking into your property ordering\n- --zeroUnits - doesn\'t complain if you add units to values of 0\n\n\nEXAMPLES\n--------\n\nLint all css files\n\n```CLI\n$ recess *.css\n```\n\nLint file, ignore styling of IDs\n\n```CLI\n$ recess ./bootstrap.css --noIds false\n```\n\nCompile and compress .less file, then output it to a new file\n\n```CLI\n$ recess ./bootstrap.less --compress > ./bootstrap-production.css\n```\n\nWatch a directory for changes and auto compile a css file from the changes. *experimental*\n\n```CLI\n$ recess input.less:ouput.css --watch watch/this/dir/for/changes\n```\n\nWatch a single file for changes and auto compile a css file from the changes. *experimental*\n\n```CLI\n$ recess input.less:ouput.css --watch\n```\n\nPROGRAMMATIC API\n----------------\n\nRecess provides a pretty simple programmatic api.\n\n```JS\nvar recess = require(\'recess\')\n```\n\nOnce you\'ve required recess, just pass it a `path` (or array of paths) and an optional `options` object and an optional `callback`:\n\n```js\nrecess([\'../fat.css\', \'../twitter.css\'], { compile: true }, callback)\n```\n\nThe following options (and defaults) are available in the programatic api:\n\n- compile: false\n- compress: false\n- noIDs: true\n- noJSPrefix: true\n- noOverqualifying: true\n- noUnderscores: true\n- noUniversalSelectors: true\n- prefixWhitespace: true\n- strictPropertyOrder: true\n- stripColors: false\n- zeroUnits: true\n\nThe callback is fired when each instance has finished processessing an input. The callback is passed an array of of instances (one for each path). The instances have a bunch of useful things on them like the raw data and an array of output strings.\n\nWhen compiling, access the compiled source through the output property:\n\n```js\nvar recess = require(\'recess\')\n\nrecess(\'./js/fat.css\', { compile: true }, function (err, obj) {\n  if (err) throw err\n  console.log(\n  \tobj // recess instance for fat.css\n  , obj.output // array of loggable content\n  , obj.errors // array of failed lint rules\n  )\n})\n```\n\nINSTALLATION\n------------\n\nTo install recess you need both node and npm installed.\n\n```CLI\n$ npm install recess -g\n```\n\nAUTHORS\n------------\n\n+ **Jacob Thornton**: https://twitter.com/fat\n\nLICENSE\n------------\n\nCopyright 2012 Twitter, Inc.\n\nLicensed under the Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0',
121 silly resolved     readmeFilename: 'README.md',
121 silly resolved     _id: 'recess@1.1.6',
121 silly resolved     _from: 'recess@1.1.6' },
121 silly resolved   { name: 'hogan.js',
121 silly resolved     description: 'A mustache compiler.',
121 silly resolved     version: '2.0.0',
121 silly resolved     keywords: [ 'mustache', 'template' ],
121 silly resolved     main: './lib/hogan.js',
121 silly resolved     homepage: 'http://twitter.github.com/hogan.js/',
121 silly resolved     author: { name: 'Twitter Inc.' },
121 silly resolved     repository: { type: 'git', url: 'https://github.com/twitter/hogan.js.git' },
121 silly resolved     licenses: [ [Object] ],
121 silly resolved     devDependencies: { 'uglify-js': '*', jsdom: '0.2.10', step: '0.0.5' },
121 silly resolved     bin: { hulk: './bin/hulk' },
121 silly resolved     readme: '## Hogan.js - A mustache compiler.\n\n[Hogan.js](http://twitter.github.com/hogan.js/) is a compiler for the\n[Mustache](http://mustache.github.com/) templating language. For information\non Mustache, see the [manpage](http://mustache.github.com/mustache.5.html) and\nthe [spec](https://github.com/mustache/spec).\n\n## Basics\n\nHogan compiles templates to HoganTemplate objects, which have a render method.\n\n```js\nvar data = {\n  screenName: "dhg",\n};\n\nvar template = Hogan.compile("Follow @{{screenName}}.");\nvar output = template.render(data);\n\n// prints "Follow @dhg."\nconsole.log(output);\n```\n\n## Features\n\nHogan is fast--try it on your workload.\n\nHogan has separate scanning, parsing and code generation phases. This way it\'s\npossible to add new features without touching the scanner at all, and many\ndifferent code generation techniques can be tried without changing the parser.\n\nHogan exposes scan and parse methods. These can be useful for\npre-processing templates on the server.\n\n```js\nvar text = "{{^check}}{{#i18n}}No{{/i18n}}{{/check}}";\ntext +=  "{{#check}}{{#i18n}}Yes{{/i18n}}{{/check}}";\nvar tree = Hogan.parse(Hogan.scan(text));\n\n// outputs "# check"\nconsole.log(tree[0].tag + " " + tree[0].name);\n\n// outputs "Yes"\nconsole.log(tree[1].nodes[0].nodes[0]);\n```\n\nIt\'s also possible to use HoganTemplate objects without the Hogan compiler\npresent. That means you can pre-compile your templates on the server, and\navoid shipping the compiler. However, the optional lambda features from the\nMustache spec do require the compiler to be present.\n\n## Why Hogan.js?\n\nWhy another templating library?\n\nHogan.js was written to meet three templating library requirements: good\nperformance, standalone template objects, and a parser API.\n\n## Issues\n\nHave a bug? Please create an issue here on GitHub!\n\nhttps://github.com/twitter/hogan.js/issues\n\n## Versioning\n\nFor transparency and insight into our release cycle, releases will be numbered with the follow format:\n\n`<major>.<minor>.<patch>`\n\nAnd constructed with the following guidelines:\n\n* Breaking backwards compatibility bumps the major\n* New additions without breaking backwards compatibility bumps the minor\n* Bug fixes and misc changes bump the patch\n\nFor more information on semantic versioning, please visit http://semver.org/.\n\n## Authors\n\n**Robert Sayre**\n\n+ http://github.com/sayrer\n\n**Jacob Thornton**\n\n+ http://github.com/fat\n\n## License\n\nCopyright 2011 Twitter, Inc.\n\nLicensed under the Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0',
121 silly resolved     readmeFilename: 'README.md',
121 silly resolved     _id: 'hogan.js@2.0.0',
121 silly resolved     _from: 'hogan.js@2.0.0' } ]
122 info install jshint@0.9.1 into /mnt/hgfs/Dropbox/github/vertnet/webapp/client
123 info install uglify-js@1.3.4 into /mnt/hgfs/Dropbox/github/vertnet/webapp/client
124 info install connect@2.1.3 into /mnt/hgfs/Dropbox/github/vertnet/webapp/client
125 info install recess@1.1.6 into /mnt/hgfs/Dropbox/github/vertnet/webapp/client
126 info install hogan.js@2.0.0 into /mnt/hgfs/Dropbox/github/vertnet/webapp/client
127 info installOne jshint@0.9.1
128 info installOne uglify-js@1.3.4
129 info installOne connect@2.1.3
130 warn engine connect@2.1.3: wanted: {"node":">= 0.5.0 < 0.7.0"} (current: {"node":"v0.8.21","npm":"1.2.12"})
131 info installOne recess@1.1.6
132 info installOne hogan.js@2.0.0
133 verbose from cache /home/eightysteele/.npm/jshint/0.9.1/package/package.json
134 verbose from cache /home/eightysteele/.npm/uglify-js/1.3.4/package/package.json
135 verbose from cache /home/eightysteele/.npm/connect/2.1.3/package/package.json
136 verbose from cache /home/eightysteele/.npm/recess/1.1.6/package/package.json
137 verbose from cache /home/eightysteele/.npm/hogan.js/2.0.0/package/package.json
138 info /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jshint unbuild
139 verbose read json /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jshint/package.json
140 info /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/uglify-js unbuild
141 verbose read json /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/uglify-js/package.json
142 info /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/connect unbuild
143 verbose read json /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/connect/package.json
144 info /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/recess unbuild
145 verbose read json /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/recess/package.json
146 info /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/hogan.js unbuild
147 verbose read json /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/hogan.js/package.json
148 verbose tar unpack /home/eightysteele/.npm/jshint/0.9.1/package.tgz
149 verbose tar unpack /home/eightysteele/.npm/uglify-js/1.3.4/package.tgz
150 silly lockFile e73e6f53-ebapp-client-node-modules-jshint /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jshint
151 verbose lock /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jshint /home/eightysteele/.npm/e73e6f53-ebapp-client-node-modules-jshint.lock
152 silly lockFile 8178cd13-ele-npm-jshint-0-9-1-package-tgz /home/eightysteele/.npm/jshint/0.9.1/package.tgz
153 verbose lock /home/eightysteele/.npm/jshint/0.9.1/package.tgz /home/eightysteele/.npm/8178cd13-ele-npm-jshint-0-9-1-package-tgz.lock
154 silly lockFile ff2f4ce4-pp-client-node-modules-uglify-js /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/uglify-js
155 verbose lock /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/uglify-js /home/eightysteele/.npm/ff2f4ce4-pp-client-node-modules-uglify-js.lock
156 silly lockFile 46e8a32f--npm-uglify-js-1-3-4-package-tgz /home/eightysteele/.npm/uglify-js/1.3.4/package.tgz
157 verbose lock /home/eightysteele/.npm/uglify-js/1.3.4/package.tgz /home/eightysteele/.npm/46e8a32f--npm-uglify-js-1-3-4-package-tgz.lock
158 verbose tar unpack /home/eightysteele/.npm/connect/2.1.3/package.tgz
159 verbose tar unpack /home/eightysteele/.npm/recess/1.1.6/package.tgz
160 verbose tar unpack /home/eightysteele/.npm/hogan.js/2.0.0/package.tgz
161 silly lockFile d8da8ab7-bapp-client-node-modules-connect /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/connect
162 verbose lock /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/connect /home/eightysteele/.npm/d8da8ab7-bapp-client-node-modules-connect.lock
163 silly lockFile 5c905fc1-le-npm-connect-2-1-3-package-tgz /home/eightysteele/.npm/connect/2.1.3/package.tgz
164 verbose lock /home/eightysteele/.npm/connect/2.1.3/package.tgz /home/eightysteele/.npm/5c905fc1-le-npm-connect-2-1-3-package-tgz.lock
165 silly lockFile fe7630bb-ebapp-client-node-modules-recess /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/recess
166 verbose lock /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/recess /home/eightysteele/.npm/fe7630bb-ebapp-client-node-modules-recess.lock
167 silly lockFile 3ba13c51-ele-npm-recess-1-1-6-package-tgz /home/eightysteele/.npm/recess/1.1.6/package.tgz
168 verbose lock /home/eightysteele/.npm/recess/1.1.6/package.tgz /home/eightysteele/.npm/3ba13c51-ele-npm-recess-1-1-6-package-tgz.lock
169 silly lockFile d6ff18c6-app-client-node-modules-hogan-js /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/hogan.js
170 verbose lock /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/hogan.js /home/eightysteele/.npm/d6ff18c6-app-client-node-modules-hogan-js.lock
171 silly lockFile a4e0f6a8-e-npm-hogan-js-2-0-0-package-tgz /home/eightysteele/.npm/hogan.js/2.0.0/package.tgz
172 verbose lock /home/eightysteele/.npm/hogan.js/2.0.0/package.tgz /home/eightysteele/.npm/a4e0f6a8-e-npm-hogan-js-2-0-0-package-tgz.lock
173 silly gunzTarPerm modes [ '755', '644' ]
174 silly gunzTarPerm modes [ '755', '644' ]
175 silly gunzTarPerm modes [ '755', '644' ]
176 silly gunzTarPerm modes [ '755', '644' ]
177 silly gunzTarPerm modes [ '755', '644' ]
178 silly gunzTarPerm extractEntry package.json
179 silly gunzTarPerm extractEntry package.json
180 silly gunzTarPerm extractEntry package.json
181 silly gunzTarPerm extractEntry package.json
182 silly gunzTarPerm extractEntry package.json
183 silly gunzTarPerm extractEntry README.md
184 silly gunzTarPerm extractEntry LICENSE
185 silly gunzTarPerm extractEntry .npmignore
186 silly gunzTarPerm extractEntry uglify-js.js
187 silly gunzTarPerm extractEntry .npmignore
188 silly gunzTarPerm extractEntry LICENSE
189 silly gunzTarPerm extractEntry .npmignore
190 silly gunzTarPerm extractEntry README.md
191 silly gunzTarPerm extractEntry README.md
192 silly gunzTarPerm extractEntry LICENSE
193 error Error: EPERM, chown '/mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jshint/package.json'
193 error  { [Error: EPERM, chown '/mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jshint/package.json']
193 error   errno: 50,
193 error   code: 'EPERM',
193 error   path: '/mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jshint/package.json',
193 error   fstream_finish_call: 'chown',
193 error   fstream_type: 'File',
193 error   fstream_path: '/mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jshint/package.json',
193 error   fstream_class: 'FileWriter',
193 error   fstream_stack:
193 error    [ 'Writer._finish (/usr/lib/nodejs/npm/node_modules/fstream/lib/writer.js:305:19)',
193 error      '/usr/lib/nodejs/npm/node_modules/graceful-fs/graceful-fs.js:222:7',
193 error      'Object.oncomplete (fs.js:297:15)' ] }
194 error Please try running this command again as root/Administrator.
195 error System Linux 3.5.0-25-generic
196 error command "nodejs" "/usr/bin/npm" "install"
197 error cwd /mnt/hgfs/Dropbox/github/vertnet/webapp/client
198 error node -v v0.8.21
199 error npm -v 1.2.12
200 error path /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jshint/package.json
201 error fstream_path /mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jshint/package.json
202 error fstream_type File
203 error fstream_class FileWriter
204 error fstream_finish_call chown
205 error code EPERM
206 error errno 50
207 error stack Error: EPERM, chown '/mnt/hgfs/Dropbox/github/vertnet/webapp/client/node_modules/jshint/package.json'
208 error fstream_stack Writer._finish (/usr/lib/nodejs/npm/node_modules/fstream/lib/writer.js:305:19)
208 error fstream_stack /usr/lib/nodejs/npm/node_modules/graceful-fs/graceful-fs.js:222:7
208 error fstream_stack Object.oncomplete (fs.js:297:15)
209 verbose exit [ 50, true ]
